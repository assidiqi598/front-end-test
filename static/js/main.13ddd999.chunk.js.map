{"version":3,"sources":["components/upload-input/upload-input.component.jsx","components/uploaded-img/uploaded-img.component.jsx","components/description/description.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["UploadInput","handleImgInput","className","type","onChange","UploadedImg","imgValue","divArray","mouseOver","mouseOut","style","backgroundImage","map","div","index","onMouseOver","onMouseOut","id","Description","divId","textArray","forEach","push","title","toString","description","useState","text","setText","parseInt","handleChange","event","target","name","value","prevValue","display","rows","App","rootState","setRootState","URL","createObjectURL","files","newArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13ddd999.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './upload-input.styles.scss';\r\n\r\nconst UploadInput = ({ handleImgInput }) => (\r\n    <div className='upload-input'>\r\n        <h1>Please choose an image file</h1>\r\n        <input\r\n            type='file'\r\n            onChange={handleImgInput}\r\n        />\r\n    </div>\r\n\r\n)\r\n\r\nexport default UploadInput;","import React from 'react';\r\n\r\nimport './uploaded-img.styles.scss';\r\n\r\n// destructure props\r\nconst UploadedImg = ({ imgValue, divArray, mouseOver, mouseOut }) => {\r\n    return (\r\n        <div\r\n            className='uploaded-img'\r\n            style={{ backgroundImage: `url(${imgValue})` }} // use string interpolation to get value and assign to backgroundImage\r\n        >\r\n            {\r\n                // make 6 divs to cover the image\r\n                divArray.map((div, index) => {\r\n                    return (\r\n                        <div\r\n                            key={index}\r\n                            className={div ? 'div-area selected' : 'div-area'}\r\n                            onMouseOver={mouseOver}\r\n                            onMouseOut={mouseOut}\r\n                            id={index}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UploadedImg;","import React, { useState } from 'react';\r\n\r\nimport './description.styles.scss';\r\n\r\nconst Description = ({ divArray, divId }) => {\r\n\r\n    // initialize a temporary empty array\r\n    const textArray = [];\r\n\r\n    // give value to the textArray\r\n    divArray.forEach((div, index) => {\r\n        textArray.push(\r\n            {\r\n                title: 'Ãœberschrift_' + (index + 1).toString(),\r\n                description: 'Beschreibung_' + (index + 1).toString() + ' Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\r\n            }\r\n        );\r\n    });\r\n\r\n    // assign the textValue to the initial state array\r\n    const [text, setText] = useState(textArray);\r\n\r\n    // convert divId to number\r\n    const id = parseInt(divId);\r\n\r\n    // handle event when description is edited\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setText(prevValue => {\r\n            const tempArray = prevValue.map((text, index) => {\r\n                if (index === id) {\r\n                    return ({\r\n                        ...text,\r\n                        [name]: value // change the property that has the same name (title or description) as the string value of name\r\n                    });\r\n                } else {\r\n                    return text;\r\n                }\r\n            });\r\n            return tempArray;\r\n        });\r\n    }\r\n\r\n    return (\r\n        // if divId is an empty string this div will not be displayed\r\n        <div className='description' style={{ display: divId === '' ? 'none' : 'flex' }} >\r\n            <input\r\n                className='title'\r\n                type='text'\r\n                name='title'\r\n                value={divId && text[id].title} // if divId has value assign the title to value\r\n                onChange={handleChange}\r\n            />\r\n            <textarea\r\n                className='desc-area'\r\n                name='description'\r\n                value={divId && text[id].description} // if divId has value assign the description to value\r\n                onChange={handleChange}\r\n                rows='3'\r\n            />\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Description;","import { useState } from 'react';\n\nimport UploadInput from './components/upload-input/upload-input.component';\nimport UploadedImg from './components/uploaded-img/uploaded-img.component';\nimport Description from './components/description/description.component';\n\nimport './App.css';\n\nfunction App() {\n\n  // initalize state\n  const [rootState, setRootState] = useState({\n    imgValue: '',\n    divArray: [true, false, false, false, false, false],\n    divId: '0'\n  });\n\n  // handle event after choosing an image\n  const handleImgInput = event => {\n    setRootState(prevValue => ({\n      ...prevValue,\n      imgValue: URL.createObjectURL(event.target.files[0])\n    }));\n  }\n\n  // handle event when mouse over a certain part of image\n  const handleMouseOver = event => {\n    const id = event.target.id;\n\n    // choose only a part where the mouse is over it\n    setRootState(prevValue => {\n      const initialArray = [false, false, false, false, false, false];\n      const newArray = initialArray.map((div, index) => {\n        if (index === parseInt(id)) {\n          return !div;\n        } else {\n          return div;\n        }\n      });\n\n      return {\n        ...prevValue,\n        divArray: newArray,\n        divId: id\n      };\n    });\n  }\n\n  // destructuring state\n  const { imgValue, divArray, divId } = rootState;\n\n  return (\n    <div className=\"App\">\n      {\n        // when an image has been choosen, render the image and its default description\n        imgValue === '' ?\n          <UploadInput handleImgInput={handleImgInput} />\n          :\n          <div>\n            <UploadedImg\n              imgValue={imgValue}\n              divArray={divArray}\n              mouseOver={handleMouseOver}\n            />\n            <Description divArray={divArray} divId={divId} />\n          </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}